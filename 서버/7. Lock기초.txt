전에 어떤 문제가 있었냐면 원자성으로 나눠서 선언된다는 것을 확인했고 넘버를 갖고 오는 거는 사실 문제가 없지만 어떤 스레드에서 사용하기 시작할때부터는 문제가 발생함.
이런식으로 동시다발적으로 스레드들이 접근을 하면 문제가 되는 코드들을 사실 또다른 특별한 용어가 있는데 그거를 이제 크리티컬 섹션이라고 합니다.

이런한 임계 영역이라고 부분이고 그 임계영역으로 하는게 아니라 아예 그냥 선을 그어준다 그러니까 여기 사이에 있는 코드는 아무도 접근하지 말아라.
내가 먼저 점유를 하면 다른 사람들은 얼씬도 하지 말라 라는 코드를 작업을 한다.

상황
Monitor.Enter(_obj); 는 문을 잠구는 행위
Monitor.Exit(_obj); 는 문을 잠금을 풀어주는 행위
잠그면 다른 애들대기 해야하는 상황이다.
상호 배제하는 상황이다.

단점으로는 관리 하기 어려워 진다는 문제가 있다.
중간에 return을 하면 문을 풀어주지 않고 하면 끝나지 않는다. 문제 발생 -짝을 꼭 맞춰줘야 한다.
이러한 상황을 데드락이라고 부른다. DeadLock

이러한 문제를 해결하기 위한 방법으로는
1. try catch를 사용해서 그 안에 Monitor.Enter과 Moniter.Exit를 무조건 거치고 가게 하는 방법
2. lock이라는 문법을 사용해서 예방 방법 lock이라는 문법안에 Moniter.Enter와 Moniter.Exit가 포함 되어있다.

















































