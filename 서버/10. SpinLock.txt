스핀 락은
작업이 동시 다발적으로 일어나는데 자물쇠를 누군가 가지고 사용중이라면 다른 스레드는 기다리고 있어야 하는데 계속 기다리는 것을 스핀 락이라고 한다.
또는 둘다 동시에 들어가 버려서 서로 자물쇠를 가지고 있다는 문제가 발생한것이다.

그래서 동시에 들어가는 상황을 원천적으로 차단을 하면 문제가 발생하지 않는다.

해결
1. Interlocked.Exchange(ref _locked, 1);  방법
이러한 문제를 방지하기 위해서 Interlocked.Exchange(ref _locked, 1); 이라는 함수를 사용해서 값을 변경시킨다.
Exchange란 그냥 여기다가 얘를 넣어주는 기능을 하는데 근데 내가 넣어주기 이전 값을 여기 오리지널이라는 값으로 뱉어줍니다.
조금더 상세하게 보면은
int original = _locked;
_locked = 1;
if(original == 0)
	break;
이라는 소리이다.
2. Interlocked.CompareExchange(ref _locked, 1, 0); 방법
if(_locked == 0);
	_locked = 1;
이라는 소리다

내가 예상한 값은 0이고 그 값이 예상한 값이 맞다고 하면은 내가 원하는 값 1을 넣어주겠다.














































