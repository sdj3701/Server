쓰레드 생성
Thread t = new Thread();
()안에 실행될 메인 함수를 넣어줘야함
static void MainThread(){}를 생성 한다음 -> 어떤 일을 할 것인지 적어줘야함
Thread t = new Thread(MainThread);
t.Start();
그러면은 별도의 쓰레드가 실행이 되는것
t.IsBackground = true; 이면은 메인 스레드가 종료가 되면은 생성된 스레드도 사라진다.
반면 t.IsBackground = false; 가 되면은 메인 스레드가 종료가 되어도 계속해서 실행된다.
t.Join();
애가 일단 끝날 때까지 여기서 기다렸다가 끝나고 나면은 이제 hello world를 출력하겠다.
이것을 가지고 실행을 하게 되면은 계속 실행이 되고 계속 반복 되어 있고
비주얼 코드에서 일시정지를 누르면 스레드에 이름없는 스레드가 생성된걸 확인 할수 있다.
이름 없는 스레드를 이름을 정해주고 싶으면은
t.Name = "Test Thread"라고 하면 된다.

하지만 이 스레드를 만드는 것은 굉장힌 큰 부담이 되는 작업이다.
그래서 단기 알바를 모집하는 것도 나쁘지 않은 방법이다.
이를 사용하기 위해서는 ThreadPool이라고 한다.
오브젝트 풀링이랑 비슷한 방법이다.
ThreadPool.QueueUserWorkItem(MainThread); 를 선언하여 사용하면된다.
MainThread를 넣어도 에러가 발생을 한다. 이를 해결하기 위해서 는 MainThread(object state)를 추가를 해줘야한다.

차이점
생성하는 것은 스레드를 계속해서 생성이 가능하지만 직원을 계속 받아들인다는 것이여서 작업 효율은 나오지 않는다.
어짜피 cpu코어는 제한되어 있으므로 코어의 수에 맞춰서 스레드를 작동시키기 때문이다.

풀의 단점
인력이 오래작업을 하게 된다면 다음 작업을 할수가 없어 먹통이 된다.
먹통이 되는지 확인하는 방법
ThreadPool.SetMinThreads(1,1);
ThreadPool.SetMaxThreads(5,5);
라고 설정을 하면 만약 Thread가 5개가 이상 생겨도 생성하는 작업을 하지 않는다.
ThreadPool.QueueUserWorkItem((obj)=>{while (true){ }}); 오브젝틀르 받아 가지고 무엇 무엇인가를 하는 애들 이렇게 만들어주세요.
오래 걸리는 일을 작업을 하게 되면은 시스템이 먹통이 되는 일이 생긴다

이를 해결해기 위해서 Task라는 것이 있다.
Task는 이제 직원을 고용한다는 느낌 보다는 이제는 직원이 할 일 단위를 우리가 정의해 가지고 뭔가 사용하겠다.
Task t = new Task(()=>{while(true){ }}); 풀이랑은 다르게 액션이기 때문에 오브젝트를 빼준다.
t.Start(); 넣어줘서 실행을 한다. 
이친구도 ThreadPool에서 넣어 가지고 관리가 될 것입니다. 직접 QueueUserWorkItem 으로 이용해 가지고 하는 거랑 조금 달리
여기다 옵션을 하나 더 넣어 줄 수 있는데 TaskCreationOptions.LongRunning을 넣어 이 작업은 오래걸리는 작업이다라는 것을 알려준다.
그러면 이친구는 먹통이 되지 않고 잘 실행이되는 방법이다.
뒤에 옵션을 추가해주지 않은 상태이면은 똑같이 먹통이 됩니다.




































